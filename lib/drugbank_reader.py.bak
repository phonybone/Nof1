from drugcard import Drugcard
from drugtarget import DrugTarget
import re
from fysom import Fysom         # fsm library

class DrugbankReader(Fysom):
    def __init__(self, fn):
        if not fn:
            raise Exception('missing arg: filename')

        self.fn=fn
        super(DrugbankReader, self).__init__({
                'initial': 'start',
                'events': [
                    {'src':'start',      'name':'begin_dc',  'dst':'def_dc'},
                    {'src':'def_dc',     'name':'attr_name', 'dst':'wait_val'},
                    {'src':'wait_val',   'name':'value',     'dst':'assn_val'},
                    {'src':'wait_val',   'name':'seq_desc',  'dst':'assn_seqd'},
                    {'src':'assn_val',   'name':'value',     'dst':'assn_val'},
                    {'src':'assn_val',   'name':'end_dc',    'dst':'end_rec'},
                    {'src':'assn_val',   'name':'attr_name', 'dst':'wait_val'},
                    {'src':'assn_val',   'name':'dtnan',     'dst':'wait_tval'},
                    {'src':'wait_tval',  'name':'value',     'dst':'assn_tval'},
                    {'src':'wait_tval',  'name':'seq_desc',  'dst':'assn_seqd'},
                    {'src':'assn_tval',  'name':'value',     'dst':'assn_tval'},
                    {'src':'assn_tval',  'name':'dtnan',     'dst':'wait_tval'},
                    {'src':'assn_tval',  'name':'end_dc',    'dst':'end_rec'},
                    {'src':'assn_seqd',  'name':'seq',       'dst':'ext_seq'},
                    {'src':'ext_seq',    'name':'seq',       'dst':'ext_seq'},
                    {'src':'ext_seq',    'name':'begin_dc',  'dst':'def_dc'},
                    {'src':'ext_seq',    'name':'attr_name', 'dst':'wait_val'},
                    {'src':'ext_seq',    'name':'dtnan',     'dst':'wait_tval'},
                    {'src':'end_rec',    'name':'being_dc',  'dst':'def_dc'},
                    ],
                'callbacks': {
                    'onbegin_dc' : self.onbegin_dc,
                    'onattr_name': self.onattr_name,
                    'onvalue'    : self.onvalue,
                    'onseq_desc' : self.onseq_desc,
                    'onseq'      : self.onseq,
                    'onend_dc'   : self.onend_dc,
                    'ondtnan'    : self.ondtnan,

                    'onleave_seq_ext' : self.onleave_seq_ext
                    }
                })

    def _line2event(self, line):
        for reg in self._line2event.regexs:
            mo=re.search(reg['regex'], line)
            if mo:
                return (reg['event'], mo)
        return (None,None)

    # order is important: most specific -> least specific
    _line2event.regexs=[{'regex':'^#BEGIN_DRUGCARD ([A-Z0-9]+)', 'event':'begin_dc'},
                        {'regex':'^#END_DRUGCARD ([A-Z0-9]+)',   'event':'end_dc'},
                        {'regex':'^# Drug_Target_(\d+)_(\S+):$', 'event':'dtnan'},
                        {'regex':'^# (.*):',                     'event':'attr_name'},
                        {'regex':'^>(.*)',                       'event':'seq_desc'},
                        {'regex':'^([A-Z]+)$',                   'event':'seq'},
                        {'regex':'(\S.+)',                       'event':'value'}]

        
    def iter(self):
        ''' return the next Drugcard'''
        with open(self.fn) as f:
            dc=None
            cur_attr_name=None
            cur_target=None


            for line in f:
                event_name,mo=self._line2event(line)
                if not event_name: continue
                cb=getattr(self,'on'+event_name)
                dc=cb(mo)
                if dc: 
                    yield dc


    def onbegin_dc(self, mo):
        dc_id=mo.group(1)
        self.dc=Drugcard(id=dc_id)
        self.cur_obj=self.dc

    def onattr_name(self, mo):
        # check for self.sequence before overwriting self.attr_name
        if (hasattr(self, 'sequence')) and (len(self.sequence) > 0):
            self.add_seq()

        self.attr_name=mo.group(1)
        if not hasattr(self.cur_obj, self.attr_name):
            setattr(self.cur_obj, self.attr_name, [])


    def onvalue(self, mo):
        value=mo.group(1)
        getattr(self.cur_obj, self.attr_name).append(value)
        

    def onseq_desc(self, mo):
        # check for existing seq:
        if hasattr(self, 'sequence') and len(self.sequence) > 0:
            self.add_seq()

        # could come from within attr_name or dtnan:
        self.sequence_desc=mo.group(1)
        self.sequence=''
        

    def onseq(self, mo):
        self.sequence+=mo.group(1)

    def onend_dc(self, mo):
        return self.dc

        
    def ondtnan(self, mo):      # like onattr_name, but for drug_target_N:

        # check for self.sequence
        if hasattr(self, 'sequence') and len(self.sequence) > 0:
            self.add_seq()

        dt_N=mo.group(1)
        dt_attr_name=mo.group(2)

        # init new dt if necessary:
        if not self.dc.cur_target() or self.dc.cur_target().N != dt_N:
            self.cur_obj=DrugTarget(dt_N)
            self.dc.add_target(self.cur_obj)
            
        self.attr_name=dt_attr_name
        if not hasattr(self.cur_obj, self.attr_name):
            setattr(self.cur_obj, self.attr_name, [])
        


    def onleave_seq_ext(self):
        print 'onleave_seq_ext called'
        

    # this is a candidate for onleave_ext_seq callback
    def add_seq(self):
        self.cur_obj.add_seq(self.attr_name, self.sequence_desc, self.sequence)
            

